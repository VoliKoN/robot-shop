---
name: "Action: Image Build"

on:
  workflow_call:
    inputs:
      imagesToBuild:
        description: |-
            Pass a json string with the images to build. e.g.:
            ["cart","catalogue","dispatch","payment","ratings","shipping","user"]
        required: false
        type: string
        default: ''

      pushImages:
        required: false
        default: 'false'
        type: string

env:
  REGISTRY: ghcr.io
  REPO_NAME: volikon

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest
    if: inputs.imagesToBuild != '' && inputs.imagesToBuild != '[]'
    strategy:
      matrix:
        image: ["${{ fromJson(inputs.imagesToBuild) }}"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup GHCR
        if: ${{ inputs.pushImages == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set image tags
        id: tags
        run: |
          echo "version_tag=$(grep -oP '(?<=TAG=).*' .env)" >> $GITHUB_OUTPUT
          echo "version_timestamp=$(date +'%s')" >> $GITHUB_OUTPUT

          # If 2 dockerfiles exist
          if [ `ls ${{ matrix.image }}/Dockerfile* | wc -l` = 2 ]; then
            dockerfile=$(ls ${{ matrix.image }}/Dockerfile* | sed -n '1 p')
            image=${{ matrix.image }}-`echo $dockerfile | awk -F "-" '{print $NF}'`
            sdockerfile=$(ls ${{ matrix.image }}/Dockerfile* | sed -n '2 p')
            simage=${{ matrix.image }}-`echo $sdockerfile | awk -F "-" '{print $NF}'`
            echo "second_dockerfile=$sdockerfile" >> $GITHUB_OUTPUT
            echo "second_image=$simage" >> $GITHUB_OUTPUT
          else
            image=${{ matrix.image }}
            dockerfile=${{ matrix.image }}/Dockerfile
            echo "second_dockerfile=" >> $GITHUB_OUTPUT
            echo "second_image=" >> $GITHUB_OUTPUT
          fi
          echo "first_dockerfile=$dockerfile" >> $GITHUB_OUTPUT
          echo "first_image=$image" >> $GITHUB_OUTPUT

      - name: Build and push image
        id: release
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.image }}
          file: ${{ steps.tags.outputs.first_dockerfile }}
          push: ${{ inputs.pushImages == 'true' }}
          tags: |-
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/rs-${{ steps.tags.outputs.first_image }}:${{ steps.tags.outputs.version_tag }}
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/rs-${{ steps.tags.outputs.first_image }}:${{ steps.tags.outputs.version_timestamp }}
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/rs-${{ steps.tags.outputs.first_image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push secondery image
        id: release-secondery
        uses: docker/build-push-action@v3
        if: ${{ steps.tags.outputs.second_image != '' }}
        with:
          context: ${{ matrix.image }}
          file: ${{ steps.tags.outputs.second_dockerfile }}
          push: ${{ inputs.pushImages == 'true' }}
          tags: |-
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/rs-${{ steps.tags.outputs.second_image }}:${{ steps.tags.outputs.version_tag }}
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/rs-${{ steps.tags.outputs.second_image }}:${{ steps.tags.outputs.version_timestamp }}
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/rs-${{ steps.tags.outputs.second_image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build successful
        id: build-success
        if: ${{ always() && steps.release.outcome == 'success' }}
        run: |-
          echo "message=ðŸŽ‰ ${{ matrix.image }}" >> $GITHUB_OUTPUT
          echo "color=0x00FF00" >> $GITHUB_OUTPUT
      - name: Build failed
        id: build-failed
        if: ${{ always() && (steps.release.outcome == 'failure') }}
        run: |-
          echo "message=ðŸ’¥ ${{ matrix.image }}" >> $GITHUB_OUTPUT
          echo "color=0xFF0000" >> $GITHUB_OUTPUT
  build_success:
    name: Build matrix success
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ always() }}
    steps:
      - name: Check build matrix status
        if: ${{ (inputs.imagesToBuild != '' && inputs.imagesToBuild != '[]') && (needs.build.result != 'success') }}
        run: exit 1
